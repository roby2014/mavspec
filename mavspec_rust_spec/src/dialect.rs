use crate::types::{DialectId, DialectVersion, MessageId};
use crate::{MessageError, MessageSpec};

/// Interface for autogenerated or custom MAVLink dialect.
pub trait DialectSpec {
    /// Dialect name as it appears in XML definition.
    fn name(&self) -> &str;

    /// Returns `dialect` identifier as specified in MAVLink [XML definitions](https://mavlink.io/en/guide/xml_schema.html).
    fn dialect(&self) -> Option<DialectId>;

    /// Minor dialect `version` as specified in MAVLink [XML definitions](https://mavlink.io/en/guide/xml_schema.html).
    ///
    /// Corresponds to [`uint8_t_mavlink_version`](https://mavlink.io/en/messages/common.html#HEARTBEAT).
    ///
    /// Dialect version appears in some messages like [HEARTBEAT](https://mavlink.io/en/messages/common.html#HEARTBEAT). In
    /// such cases it is usually not directly set by user.
    fn version(&self) -> Option<DialectVersion>;

    /// Message specification by `id`.
    ///
    /// Clients may access this method to retrieve message specification prior to decoding it from
    /// payload.
    ///
    /// # Errors
    ///
    /// Returns [`MessageError::UnsupportedMessageId`] if message with specified ID is not supported.
    fn message_info(&self, id: MessageId) -> Result<&dyn MessageSpec, MessageError>;
}

use crate::types::{DialectId, DialectVersion, MessageId};
use crate::{IntoPayload, MavLinkVersion, MessageSpec, Payload, SpecError};

/// Interface for autogenerated or custom MAVLink dialect specification.
pub trait DialectSpec: Sync + Send {
    /// Dialect name as it appears in XML definition.
    fn name(&self) -> &str;

    /// Returns `dialect` identifier as specified in MAVLink [XML definitions](https://mavlink.io/en/guide/xml_schema.html).
    fn dialect(&self) -> Option<DialectId>;

    /// Minor dialect `version` as specified in MAVLink [XML definitions](https://mavlink.io/en/guide/xml_schema.html).
    ///
    /// Corresponds to [`uint8_t_mavlink_version`](https://mavlink.io/en/messages/common.html#HEARTBEAT).
    ///
    /// Dialect version appears in some messages like [HEARTBEAT](https://mavlink.io/en/messages/common.html#HEARTBEAT). In
    /// such cases it is usually not directly set by user.
    fn version(&self) -> Option<DialectVersion>;

    /// Message specification by `id`.
    ///
    /// Clients may access this method to retrieve message specification prior to decoding it from
    /// payload.
    ///
    /// # Errors
    ///
    /// Returns [`SpecError::NotInDialect`] if message with specified ID is not supported.
    fn message_info(&self, id: MessageId) -> Result<&dyn MessageSpec, SpecError>;
}

/// Interface for autogenerated or custom MAVLink dialect implementation.
pub trait DialectImpl: DialectSpec {
    /// Container type for MAVLink message.
    type Message: DialectMessage;

    /// Decode [`Message`](Self::Message) from [`Payload`].
    fn decode(&self, payload: &Payload) -> Result<Self::Message, SpecError> {
        Self::Message::decode(payload)
    }

    /// Encode provided [`Message`](Self::Message) into [`Payload`] for a specified MAVLink `version`.
    fn encode(&self, msg: &Self::Message, version: MavLinkVersion) -> Result<Payload, SpecError> {
        msg.encode(version)
    }
}

/// Interface for a generic dialect message.
///
/// [`DialectMessage`] is an enum, where variants are all possible messages of a dialect.
pub trait DialectMessage: MessageSpec + IntoPayload + Sized + Sync + Send {
    /// Decode dialect message from [`Payload`].
    fn decode(payload: &Payload) -> Result<Self, SpecError>;
}

//! # MAVLink message
#![warn(missing_docs)]
#![deny(rustdoc::broken_intra_doc_links)]

use super::MavLinkVersion;

/// Generic MAVLink message specification.
///
/// [`MavLinkMessageInfo`] implements this trait.
///
/// Messages generated by [MAVCodeGen](https://gitlab.com/mavka/libs/mavcodegen) also implement this trait.
pub trait MavLinkMessageSpec {
    /// MAVLink message ID.
    ///
    /// In `MAVLink 2` message ID is a 24-bit unsigned integer stored as [`u32`].
    ///
    /// `MAVLink 1` supports only 8-bit message ID.
    ///
    /// # Links
    ///
    ///  - [MAVLink 2](https://mavlink.io/en/guide/mavlink_2.html)
    ///  - [MAVLink serialization](https://mavlink.io/en/guide/serialization.html)
    fn id(&self) -> u32;

    /// Minimum supported MAVLink protocol version.
    ///
    /// Messages supporting both `MAVLink 1` and `MAVLink 2` will return [`MavLinkVersion::V1`].
    ///
    /// Messages which make sense only in `MAVLink 2` will return [`MavLinkVersion::V2`],
    fn min_supported_mavlink_version(&self) -> MavLinkVersion;

    /// Message `EXTRA_CRC` calculated from message XML definition.
    ///
    /// CRC for message name and key message fields to detect incompatible changes in
    /// message definition.
    ///
    /// See: [CRC_EXTRA calculation](https://mavlink.io/en/guide/serialization.html#crc_extra) in
    /// MAVLink docs.
    fn extra_crc(&self) -> u8;
}

/// Generic information about MAVLink message.
///
/// Used in dialects to provide information required for message verification and processing.
#[derive(Copy, Clone, Debug)]
pub struct MavLinkMessageInfo {
    id: u32,
    min_supported_mavlink_version: MavLinkVersion,
    extra_crc: u8,
}

impl MavLinkMessageSpec for MavLinkMessageInfo {
    /// MAVLink message ID.
    ///
    /// See: [`MavLinkMessageSpec::id`].
    #[inline]
    fn id(&self) -> u32 {
        self.id
    }

    /// Minimum supported MAVLink protocol version.
    ///
    /// See: [`MavLinkMessageSpec::min_supported_mavlink_version`].
    #[inline]
    fn min_supported_mavlink_version(&self) -> MavLinkVersion {
        self.min_supported_mavlink_version
    }

    /// Message `EXTRA_CRC` calculated from message XML definition.
    ///
    /// See: [`MavLinkMessageSpec::extra_crc`].
    #[inline]
    fn extra_crc(&self) -> u8 {
        self.extra_crc
    }
}

impl MavLinkMessageInfo {
    /// Default constructor.
    ///
    /// Sets `min_supported_mavlink_version` to [`MavLinkVersion::V2`] if message `id` greater
    /// than [`u8::MAX`]. The latter means it can't be fitted into `MAVLink 1` packet. Otherwise
    /// sets to [`MavLinkVersion::V1`].
    pub const fn new(id: u32, extra_crc: u8) -> Self {
        // Force `MAVLink 2` as minimum protocol version if `id` can't be represented as `u8`
        let min_supported_mavlink_version = if id > u8::MAX as u32 {
            MavLinkVersion::V2
        } else {
            MavLinkVersion::V1
        };

        Self {
            id,
            min_supported_mavlink_version,
            extra_crc,
        }
    }
}
